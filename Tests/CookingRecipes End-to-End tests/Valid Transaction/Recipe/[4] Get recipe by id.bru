meta {
  name: [4] Get recipe by id
  type: http
  seq: 4
}

get {
  url: {{baseUrl}}/recipes/{{recipeId}}
  body: none
  auth: bearer
}

auth:bearer {
  token: {{token}}
}

assert {
  res.status: eq 200
}

tests {
  test("status code 200", function() {
    const data = res.getBody();
    expect(res.getStatus()).to.equal(200);
  });
  
  test("name value is Test", function() {
    const data = res.getBody();
    expect(data.name).to.be.a("string");
    expect(data.name).to.equal("Test");
  });
  
  test("description value is Test", function() {
    const data = res.getBody();
    expect(data.description).to.be.a("string");
    expect(data.description).to.equal("Test");
  });
  
  test("authorName value is Test", function() {
    const data = res.getBody();
    expect(data.authorName).to.be.a("string");
    expect(data.authorName).to.equal("test");
  });
  
  test("cookingTime value is 10", function() {
    const data = res.getBody();
    expect(data.cookingTime).to.be.a("number");
    expect(data.cookingTime).to.equal(10);
  });
  
  test("portion value is 2", function() {
    const data = res.getBody();
    expect(data.portion).to.be.a("number");
    expect(data.portion).to.equal(2);
  });
  
  test("avatarPath value is null", function() {
    const data = res.getBody();
    expect(data.avatarPath).to.be.null;
  });
  
  test("isLike value is false", function() {
    const data = res.getBody();
    expect(data.isLike).to.be.a("boolean");
    expect(data.isLike).to.equal(false);
  });
  
  test("likeCount value is 0", function() {
    const data = res.getBody();
    expect(data.likeCount).to.be.a("number");
    expect(data.likeCount).to.equal(0);
  });
  
  test("isFavourite value is false", function() {
    const data = res.getBody();
    expect(data.isLike).to.be.a("boolean");
    expect(data.isLike).to.equal(false);
  });
  
  test("favouriteCount value is 0", function() {
    const data = res.getBody();
    expect(data.likeCount).to.be.a("number");
    expect(data.likeCount).to.equal(0);
  });
  
  test("tags value is an empty array", function() {
    const data = res.getBody();
    expect(data.tags).to.be.an('array');
    expect(data.tags.length).to.equal(0);
  });
}
